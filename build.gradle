plugins {
    id 'java'
    id 'jacoco'
    id("maven-publish")
}

group = 'by.andd3dfx'
version = '1.0.2-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.hamcrest:hamcrest:3.0'
    testImplementation 'org.assertj:assertj-core:3.26.3'
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed",
                // "standardOut",   // Uncomment to get all logs during tests execution
                "standardError"
    }
    afterSuite { desc, result ->
        if (!desc.parent)
            println("${result.resultType} " +
                    "(${result.testCount} tests, " +
                    "${result.successfulTestCount} successes, " +
                    "${result.failedTestCount} failures, " +
                    "${result.skippedTestCount} skipped)")
    }

    finalizedBy jacocoTestReport    // report is always generated after tests run
    jacoco {
        destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
    }
}

jacocoTestReport {
    reports {
        csv.required = true
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/dto/**',
            ])
        }))
    }
}

javadoc {
    source = sourceSets.main.allJava
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/andrei-punko/pde-solvers")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}
