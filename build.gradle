plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

group = 'io.github.andrei-punko'
version = '1.0.3-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core:3.26.3'
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed",
                // "standardOut",   // Uncomment to get all logs during tests execution
                "standardError"
    }
    afterSuite { desc, result ->
        if (!desc.parent)
            println("${result.resultType} " +
                    "(${result.testCount} tests, " +
                    "${result.successfulTestCount} successes, " +
                    "${result.failedTestCount} failures, " +
                    "${result.skippedTestCount} skipped)")
    }

    finalizedBy jacocoTestReport    // report is always generated after tests run
    jacoco {
        destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
    }
}

jacocoTestReport {
    reports {
        csv.required = true
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/dto/**',
            ])
        }))
    }
}

javadoc {
    source = sourceSets.main.allJava
}

// Enable JavaDoc and Sources JAR generation
java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    repositories {
        maven {
            name = "OSSRH"
            url = uri("https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/")
            credentials {
                username = project.findProperty("ossrhUsername")
                password = project.findProperty("ossrhPassword")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/andrei-punko/pde-solvers")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from(components.java)

            groupId = project.group
            artifactId = project.name
            version = project.version

            pom {
                name = 'PDE Solvers'
                description = 'A Java library for solving partial differential equations using finite difference methods'
                url = 'https://github.com/andrei-punko/pde-solvers'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://rem.mit-license.org/license.txt'
                    }
                }

                developers {
                    developer {
                        id = 'andrei-punko'
                        name = 'Andrei Punko'
                        email = 'andrei.punko@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/andrei-punko/pde-solvers.git'
                    developerConnection = 'scm:git:ssh://github.com:andrei-punko/pde-solvers.git'
                    url = 'https://github.com/andrei-punko/pde-solvers'
                }
            }
        }
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
